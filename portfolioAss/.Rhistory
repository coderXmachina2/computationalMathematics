}
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%HH%MM%SS")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
myData$New.Map <- format(as.integer(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S"))
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
myData$New.Map <- format(strptime(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S"))
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
library(chron)
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
time(myData$New.Map)
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
library(chron)
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
time(myData$New.Map)
cat("\n")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
library(chron)
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
myData$New.Map <- time(myData$New.Map)
cat("\n")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
library(chron)
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
library(chron)
myData$New.Map <- format(as.POSIXlt(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
library(chron)
myData$New.Map <- format(as.POSIXlt(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
library(chron)
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
library(chron)
myData$New.Map <- format(as.POSIXt(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
library(chron)
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
library(chron)
myData$New.Map <- as.POSIXct(myData$Sleep.Time,format="%l:%M:%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
library(chron)
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
library(chron)
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
myData$New.Map <- chron(times=myData$New.Map)
library(chron)
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
myData$New.Map <- chron(myData$New.Map)
library(chron)
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
myData$New.Map <- as.numeric(myData$New.Map)
cat("\n")
typeof(myData$New.Map[1])
myData$New.Map[1]
cat("\n")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
library(chron)
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
myData$New.Map <- strptime(myData$New.Map)
library(chron)
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
myData$New.Map[1]
myData$New.Map <- strptime(myData$New.Map)
myData$New.Map <- strptime(myData$Sleep.Time, %H:%M:%S")
myData$New.Map <- strptime(myData$Sleep.Time, "%H:%M:%S")
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
myData$New.Map <- strptime(myData$Sleep.Time, "%H:%M:%S")
typeof(New.Map)
myData$New.Map <- strptime(myData$Sleep.Time, "%H:%M:%S")
typeof(myData$ew.Map)
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
myData$New.Map <- strptime(myData$Sleep.Time, "%H:%M:%S")
typeof(myData$New.Map)
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
myData$New.Map <- strptime(myData$Sleep.Time, "%H:%M:%S")
typeof(myData$New.Map[1])
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
myData$New.Map <- strptime(myData$Sleep.Time, "%H:%M:%S")
myData$New.Map <- format(as.POSIXct(myData$Sleep.Time,format="%l:%M:%S"),"%H%M%S")
typeof(myData$New.Map[1])
for (row in 1:nrow(myData)) {
print(myData[row, "New.Map"])
#if (myData[row, "New.Map"] > 0 ) {
#statement1
#} else if ( test_expression2) {
#statement2
#} else if ( test_expression3) {
#statement3
#}
}
myData <- read.csv('./data/sleepCoffeeProductivity.csv')
cat("Is data a dataframe: ", is.data.frame(myData), "\n")
cat("Dataset Contains: ", ncol(myData), " Attributes\n")
cat("Dataset Contains: ", nrow(myData), " Instances")
View(myData)
library(MASS)
chiTestTbl <- (myData$sleepTimeCatClass, myData$Total.Daily.Productivity)
library(MASS)
chiTestTbl <- table(myData$sleepTimeCatClass, myData$Total.Daily.Productivity)
print("Ass")
library(MASS)
chiTestTbl <- table(myData$sleepTimeCatClass, myData$Total.Daily.Productivity)
chiTestTbl
library(MASS)
chiTestTbl <- table(myData$sleepTimeCatClass, myData$Total.Daily.Productivity)
chiTestTbl
library(MASS)
chiTestTbl <- table(myData$sleepTimeCatClass, myData$Total.Daily.Productivity)
chiTestTbl
chisq.test(chiTestTbl)
#make it further accurate by combining tables
chiTestTbl[,"0"]
#cbtl <- cbind(chiTestTbl)
#make it further accurate by combining tables
chiTestTbl[,"0"]
#cbtl <- cbind(chiTestTbl)
#make it further accurate by combining tables
chiTestTbl[,"0"]
chiTestTbl[,"1.1"]
#cbtl <- cbind(chiTestTbl)
#make it further accurate by combining tables
chiTestTbl[,"0"]
chiTestTbl[,"1.1"]
chiTestTbl[,"1.21"]
#make it further accurate by combining tables
chiTestTbl[,"0"]
chiTestTbl[,"1.1"]
chiTestTbl[,"1.15"]
#cbtl <- cbind(chiTestTbl)
#make it further accurate by combining tables
chiTestTbl[,"0"]
chiTestTbl[,"1.1"]
chiTestTbl[,"1.15"]
chiTestTbl[,"1.45"]
chiTestTbl[,"2"]
#cbtl <- cbind(chiTestTbl)
#make it further accurate by combining tables
chiTestTbl[,"0"]
chiTestTbl[,"1.1"]
chiTestTbl[,"1.15"]
chiTestTbl[,"1.45"]
chiTestTbl[,"2"]
chiTestTbl[,"2.05"]
#cbtl <- cbind(chiTestTbl)
#make it further accurate by combining tables
chiTestTbl[,"0"]
chiTestTbl[,"1.1"]
chiTestTbl[,"1.15"]
chiTestTbl[,"1.45"]
chiTestTbl[,"2"]
chiTestTbl[,"2.05"]
chiTestTbl[,"2.15"]
chiTestTbl[,"2.3"]
#cbtl <- cbind(chiTestTbl)
#make it further accurate by combining tables
chiTestTbl[,"0"]
chiTestTbl[,"1.1"]
chiTestTbl[,"1.15"]
chiTestTbl[,"1.45"]
chiTestTbl[,"2"]
chiTestTbl[,"2.05"]
chiTestTbl[,"2.15"]
chiTestTbl[,"2.3"]
chiTestTbl[,"2.6"]
chiTestTbl[,"2.7"]
chiTestTbl[,"3.05"]
chiTestTbl[,"3.35"]
chiTestTbl[,"3.4"]
chiTestTbl[,"3.45"]
chiTestTbl[,"3.4"]
chiTestTbl[,"3.8"]
chiTestTbl[,"4.15"]
chiTestTbl[,"4.3"]
chiTestTbl[,"4.35"]
chiTestTbl[,"4.45"]
chiTestTbl[,"5"]
chiTestTbl[,"5.3"]
#cbtl <- cbind(chiTestTbl)
#make it further accurate by combining tables
newTbl <- cbind(chiTestTbl[,"0"]+chiTestTbl[,"1.1"]+chiTestTbl[,"1.15"]+chiTestTbl[,"1.45"]+chiTestTbl[,"2"]+chiTestTbl[,"2.05"]+chiTestTbl[,"2.15"],
chiTestTbl[,"2.3"]+chiTestTbl[,"2.6"]+chiTestTbl[,"2.7"]+chiTestTbl[,"3.05"]+chiTestTbl[,"3.35"]+chiTestTbl[,"3.4"]+chiTestTbl[,"3.45"],
chiTestTbl[,"3.4"]+chiTestTbl[,"3.8"]+chiTestTbl[,"4.15"]+chiTestTbl[,"4.3"]+chiTestTbl[,"4.35"]+chiTestTbl[,"4.45"]+chiTestTbl[,"5"]+chiTestTbl[,"5.3"])
#
#cbtl <- cbind(chiTestTbl)
#make it further accurate by combining tables
newTbl <- cbind(chiTestTbl[,"0"]+chiTestTbl[,"1.1"]+chiTestTbl[,"1.15"]+chiTestTbl[,"1.45"]+chiTestTbl[,"2"]+chiTestTbl[,"2.05"]+chiTestTbl[,"2.15"],
chiTestTbl[,"2.3"]+chiTestTbl[,"2.6"]+chiTestTbl[,"2.7"]+chiTestTbl[,"3.05"]+chiTestTbl[,"3.35"]+chiTestTbl[,"3.4"]+chiTestTbl[,"3.45"],
chiTestTbl[,"3.4"]+chiTestTbl[,"3.8"]+chiTestTbl[,"4.15"]+chiTestTbl[,"4.3"]+chiTestTbl[,"4.35"]+chiTestTbl[,"4.45"]+chiTestTbl[,"5"]+chiTestTbl[,"5.3"])
chisq.test(mewTbl)
#make it further accurate by combining tables
newTbl <- cbind(chiTestTbl[,"0"]+chiTestTbl[,"1.1"]+chiTestTbl[,"1.15"]+chiTestTbl[,"1.45"]+chiTestTbl[,"2"]+chiTestTbl[,"2.05"]+chiTestTbl[,"2.15"],
chiTestTbl[,"2.3"]+chiTestTbl[,"2.6"]+chiTestTbl[,"2.7"]+chiTestTbl[,"3.05"]+chiTestTbl[,"3.35"]+chiTestTbl[,"3.4"]+chiTestTbl[,"3.45"],
chiTestTbl[,"3.4"]+chiTestTbl[,"3.8"]+chiTestTbl[,"4.15"]+chiTestTbl[,"4.3"]+chiTestTbl[,"4.35"]+chiTestTbl[,"4.45"]+chiTestTbl[,"5"]+chiTestTbl[,"5.3"])
chisq.test(newTbl)
#cbtl <- cbind(chiTestTbl)
library(MASS)
chiTestTbl <- table(myData$sleepTimeCatClass, myData$Total.Daily.Productivity)
cat(chiTestTbl, "\n\n")
chisq.test(chiTestTbl)
#make it further accurate by combining tables
newTbl <- cbind(chiTestTbl[,"0"]+chiTestTbl[,"1.1"]+chiTestTbl[,"1.15"]+chiTestTbl[,"1.45"]+chiTestTbl[,"2"]+chiTestTbl[,"2.05"]+chiTestTbl[,"2.15"],
chiTestTbl[,"2.3"]+chiTestTbl[,"2.6"]+chiTestTbl[,"2.7"]+chiTestTbl[,"3.05"]+chiTestTbl[,"3.35"]+chiTestTbl[,"3.4"]+chiTestTbl[,"3.45"],
chiTestTbl[,"3.4"]+chiTestTbl[,"3.8"]+chiTestTbl[,"4.15"]+chiTestTbl[,"4.3"]+chiTestTbl[,"4.35"]+chiTestTbl[,"4.45"]+chiTestTbl[,"5"]+chiTestTbl[,"5.3"])
chisq.test(newTbl)
#cbtl <- cbind(chiTestTbl)
#make it further accurate by combining tables into 3 groups
newTbl <- cbind(chiTestTbl[,"0"]+chiTestTbl[,"1.1"]+chiTestTbl[,"1.15"]+chiTestTbl[,"1.45"]+chiTestTbl[,"2"]+chiTestTbl[,"2.05"]+chiTestTbl[,"2.15"]+ chiTestTbl[,"2.3"]+chiTestTbl[,"2.6"]+chiTestTbl[,"2.7"],
chiTestTbl[,"3.05"]+chiTestTbl[,"3.35"]+chiTestTbl[,"3.4"]+chiTestTbl[,"3.45"]+chiTestTbl[,"3.4"]+chiTestTbl[,"3.8"]+chiTestTbl[,"4.15"]+chiTestTbl[,"4.3"]+chiTestTbl[,"4.35"]+chiTestTbl[,"4.45"]+
chiTestTbl[,"5"]+chiTestTbl[,"5.3"])
chisq.test(newTbl)
#cbtl <- cbind(chiTestTbl)
library(MASS)
chiTestTbl <- table(myData$sleepTimeCatClass, myData$Total.Daily.Productivity)
cat(chiTestTbl, "\n\n")
chisq.test(chiTestTbl)
library(MASS)
chiTestTbl <- table(myData$sleepTimeCatClass, myData$Total.Daily.Productivity)
chiTestTbl
cat(chiTestTbl, "\n\n")
chisq.test(chiTestTbl)
mean(myData$Total.Daily.Productivity)
lambda <- mean(myData$Total.Daily.Productivity)
myData <- read.csv('./data/sleepCoffeeProductivity.csv')
cat("Is data a dataframe: ", is.data.frame(myData), "\n")
cat("Dataset Contains: ", ncol(myData), " Attributes\n")
cat("Dataset Contains: ", nrow(myData), " Instances")
lambda <- mean(myData$Total.Daily.Productivity)
ppois(3,lambda, lower.tail=FALSE)
pValPois <- ppois(3,lambda, lower.tail=FALSE)
pValPois <- ppois(3,lambda, lower.tail=FALSE)
cat("The p value: ", pValPois)
expect <- c()
obs <- c()
