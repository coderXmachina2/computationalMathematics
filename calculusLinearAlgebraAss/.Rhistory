n <- seq(-pi,pi,5/100)
f = function(x){
return(sin(sin(x^2)) + cos(1/(1 + x + x^2)) - 1)
}
plot(n , f(n), type='o', col = 'red', main = "function on interval -pi to pi")
abline(h = 0, col = 'black')
abline(v = 0, col = 'black')
abline(v = -pi, col = 'blue')
abline(v = pi, col = 'blue')
root1 <- uniroot(f, c(-2,-1))
root2 <- uniroot(f, c(-1,0))
root3 <- uniroot(f, c(1,2))
root4 <- uniroot(f, c(0,1))
roots <- c(root1$root , root2$root , root3$root, root4$root)
cat("x intercepts when f(x) = 0:\n")
roots
f2 <- function(x,y){
return((x^2) + (y^2) + 7*sin(x+y^2))
}
f2(0.4,0.5)
checkVal <- (0.4^2) + (0.5^2) + 7*sin(0.4+0.5^2)
checkVal
xRange <- rep(seq(from = -10, to = 10),2)
yRange <- rep(seq(from = 10, to = 10),2)
z <- matrix((xRange^2) + (yRange^2) + 7*sin(xRange+yRange^2), ncol=10,byrow=T)
filled.contour(z, , nlevels = 10 , xlim = c(0,1.5) , ylim = c(0, 1.5) , xlab = "x", ylab = "y" , main = "Contour of Function")
contour(z, nlevels = 10 , xlim = c(0,3) , ylim = c(0, 3) , xlab = "x", ylab = "y" , main = "Contour of Function")
save.image("~/projectRepos/computationalMathematics/computationalMathematics/calculusLinearAlgebraAss/calculusLinearAlgebraData.RData")
xRange <- rep(seq(from = -10, to = 10),2)
yRange <- rep(seq(from = 10, to = 10),2)
z <- matrix((xRange^2) + (yRange^2) + 7*sin(xRange+yRange^2), ncol=10,byrow=T)
filled.contour(z, , nlevels = 10 , xlim = c(0,3) , ylim = c(0, 3) , xlab = "x", ylab = "y" , main = "Contour of Function")
xRange <- rep(seq(from = -10, to = 10),2)
yRange <- rep(seq(from = 10, to = 10),2)
z <- matrix((xRange^2) + (yRange^2) + 7*sin(xRange+yRange^2), ncol=10,byrow=T)
filled.contour(z, , nlevels = 10 , xlim = c(1,3) , ylim = c(1, 3) , xlab = "x", ylab = "y" , main = "Contour of Function")
xRange <- rep(seq(from = -10, to = 10),2)
yRange <- rep(seq(from = 10, to = 10),2)
z <- matrix((xRange^2) + (yRange^2) + 7*sin(xRange+yRange^2), ncol=10,byrow=T)
filled.contour(z, , nlevels = 10 , xlim = c(0,3) , ylim = c(1, 3) , xlab = "x", ylab = "y" , main = "Contour of Function")
xRange <- rep(seq(from = -10, to = 10),2)
yRange <- rep(seq(from = 10, to = 10),2)
z <- matrix((xRange^2) + (yRange^2) + 7*sin(xRange+yRange^2), ncol=10,byrow=T)
filled.contour(z, , nlevels = 10 , xlim = c(0,3) , ylim = c(0, 3) , xlab = "x", ylab = "y" , main = "Contour of Function")
xRange <- rep(seq(from = -10, to = 10),2)
yRange <- rep(seq(from = 10, to = 10),1)
z <- matrix((xRange^2) + (yRange^2) + 7*sin(xRange+yRange^2), ncol=10,byrow=T)
filled.contour(z, , nlevels = 10 , xlim = c(0,3) , ylim = c(0, 3) , xlab = "x", ylab = "y" , main = "Contour of Function")
xRange <- rep(seq(from = -10, to = 10),10)
yRange <- rep(seq(from = 10, to = 10),1)
z <- matrix((xRange^2) + (yRange^2) + 7*sin(xRange+yRange^2), ncol=10,byrow=T)
filled.contour(z, , nlevels = 10 , xlim = c(0,3) , ylim = c(0, 3) , xlab = "x", ylab = "y" , main = "Contour of Function")
xRange <- rep(seq(from = -10, to = 10),1)
yRange <- rep(seq(from = 10, to = 10),1)
z <- matrix((xRange^2) + (yRange^2) + 7*sin(xRange+yRange^2), ncol=10,byrow=T)
filled.contour(z, , nlevels = 10 , xlim = c(0,3) , ylim = c(0, 3) , xlab = "x", ylab = "y" , main = "Contour of Function")
xRange <- rep(seq(from = -10, to = 10),2)
yRange <- rep(seq(from = 10, to = 10),2)
z <- matrix((xRange^2) + (yRange^2) + 7*sin(xRange+yRange^2), ncol=10,byrow=T)
filled.contour(z, , nlevels = 10 , xlim = c(0,3) , ylim = c(0, 3) , xlab = "x", ylab = "y" , main = "Contour of Function")
xRange <- rep(seq(from = -10, to = 10),2)
yRange <- rep(seq(from = 10, to = 10),2)
z <- matrix((xRange^2) + (yRange^2) + 7*sin(xRange+yRange^2), ncol=10,byrow=T)
filled.contour(z, , nlevels = 10  , xlab = "x", ylab = "y" , main = "Contour of Function")
xRange <- rep(seq(from = -10, to = 10),2)
yRange <- rep(seq(from = 10, to = 10),2)
z <- matrix((xRange^2) + (yRange^2) + 7*sin(xRange+yRange^2), ncol=10,byrow=T)
filled.contour(xRange,yRange,z, , nlevels = 10  , xlab = "x", ylab = "y" , main = "Contour of Function")
View(root4)
View(z)
View(z)
z
x <- 1:10
y <- 1:10
expand.grid(x,y)
expand.grid(x,y)
apply(expand.grid(x,y),2,sum)
apply(expand.grid(x,y),1,sum)
apply(expand.grid(x,y),1,function(x){x[1]+x[2]^2})
matrix(apply(expand.grid(x,y),1,function(x){x[1]+x[2]^2}),10,10)
contour(matrix(apply(expand.grid(x,y),1,function(x){x[1]+x[2]^2}),10,10))
contour(matrix(apply(expand.grid(x,y),1,function(x){x[1]+x[2]^2/88}),10,10))
